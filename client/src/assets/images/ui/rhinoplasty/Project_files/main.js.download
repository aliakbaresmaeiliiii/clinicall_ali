import {
  LoginComponent
} from "/chunk-Z7LGPRMN.js";
import "/chunk-ELGPZAGB.js";
import "/chunk-H6WCJUBV.js";
import {
  AuthService
} from "/chunk-HJRNGV74.js";
import {
  UserService
} from "/chunk-ZNQRPPXQ.js";
import "/chunk-2LZGACZF.js";
import "/chunk-Y5RQAIA6.js";

// src/main.ts
import { bootstrapApplication } from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/@angular_platform-browser.js?v=3b3a651e";

// src/app/app.config.ts
import { importProvidersFrom, provideZoneChangeDetection } from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/@angular_core.js?v=3b3a651e";
import { provideRouter } from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/@angular_router.js?v=3b3a651e";
import { HTTP_INTERCEPTORS, provideHttpClient, withFetch, withInterceptorsFromDi } from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/@angular_common_http.js?v=3b3a651e";
import { MatSnackBarModule } from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/@angular_material_snack-bar.js?v=3b3a651e";
import { provideClientHydration } from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/@angular_platform-browser.js?v=3b3a651e";
import { provideAnimationsAsync } from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/@angular_platform-browser_animations_async.js?v=3b3a651e";
import { provideToastr } from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/ngx-toastr.js?v=3b3a651e";

// src/app/core/auth/guards/auth.guard.ts
import { inject } from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/@angular_core.js?v=3b3a651e";
import { Router } from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/@angular_router.js?v=3b3a651e";
var authGuard = (route, state) => {
  const router = inject(Router);
  if (typeof localStorage !== "undefined") {
    const getStoreItem = localStorage.getItem("userData");
    if (getStoreItem) {
      const getItem = JSON.parse(getStoreItem);
      if (Object.keys(getItem).length > 0) {
        return true;
      } else {
        router.navigateByUrl("/login");
        return false;
      }
    } else {
      router.navigateByUrl("/login");
      return false;
    }
  } else {
    router.navigateByUrl("/login");
    return false;
  }
};

// src/app/modules/not-found/not-found.component.ts
import { Component } from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/@angular_core.js?v=3b3a651e";
import * as i0 from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/@angular_core.js?v=3b3a651e";
var NotFoundComponent = class _NotFoundComponent {
  static {
    this.\u0275fac = function NotFoundComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NotFoundComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i0.\u0275\u0275defineComponent({ type: _NotFoundComponent, selectors: [["app-not-found"]], features: [i0.\u0275\u0275ExternalStylesFeature(["e0c288ccced18735b17342994f6398b45c19008adb34520fbc797c239ac56b98.css"])], decls: 2, vars: 0, template: function NotFoundComponent_Template(rf, ctx) {
      if (rf & 1) {
        i0.\u0275\u0275elementStart(0, "p");
        i0.\u0275\u0275text(1, "not-found works!");
        i0.\u0275\u0275elementEnd();
      }
    } });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i0.\u0275setClassDebugInfo(NotFoundComponent, { className: "NotFoundComponent", filePath: "src/app/modules/not-found/not-found.component.ts", lineNumber: 9 });
})();

// src/app/app.routes.ts
var routes = [
  {
    path: "",
    loadChildren: () => import("/chunk-GJW37BWA.js").then((u) => u.UiModule)
  },
  {
    path: "login",
    component: LoginComponent,
    title: "login"
  },
  {
    path: "auth",
    loadChildren: () => import("/chunk-2G7TABTM.js").then((c) => c.CoreModule)
  },
  {
    path: "aliakbar",
    loadChildren: () => import("/chunk-4QGIRAXR.js").then((m) => m.ModulesModule),
    canActivate: [authGuard],
    data: { breadcrumb: "aliakbar" }
  },
  {
    path: "not found",
    component: NotFoundComponent
  },
  {
    path: "",
    redirectTo: "home",
    pathMatch: "full"
  },
  {
    path: "**",
    redirectTo: "not found"
  }
];

// src/app/core/interceptors/auth-interceptor.ts
import { Injectable as Injectable3, inject as inject3 } from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/@angular_core.js?v=3b3a651e";
import { throwError } from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/rxjs.js?v=3b3a651e";
import { catchError } from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/rxjs_operators.js?v=3b3a651e";
import { ToastrService as ToastrService2 } from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/ngx-toastr.js?v=3b3a651e";

// src/app/shared/client-services/error.service.ts
import { Injectable as Injectable2 } from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/@angular_core.js?v=3b3a651e";

// src/app/shared/data/common-message.data.ts
var COMMON_MESSAGES = {
  unknownError: "Something went wrong!",
  savedSuccessfully: "Saved Successfully",
  savingWasNotSuccessful: "Saving was not successful",
  UpdatingWasNotSuccessful: "Updating was not successful",
  updatedSuccessfully: "Updated Successfully",
  sessionIsTerminated: "Your session is terminated; Please login again.",
  serverIsNotResponsible: "Server is not Responsible. Please try again later"
};

// src/app/shared/client-services/error.service.ts
import * as i03 from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/@angular_core.js?v=3b3a651e";
import * as i1 from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/@angular_router.js?v=3b3a651e";
import * as i2 from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/@angular_material_dialog.js?v=3b3a651e";

// src/app/shared/client-services/notification.service.ts
import { Injectable, inject as inject2 } from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/@angular_core.js?v=3b3a651e";
import { MatSnackBar } from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/@angular_material_snack-bar.js?v=3b3a651e";
import { ToastrService } from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/ngx-toastr.js?v=3b3a651e";
import * as i02 from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/@angular_core.js?v=3b3a651e";
var NotificationService = class _NotificationService {
  constructor() {
    this.#toastrService = inject2(ToastrService);
    this.matDialog = inject2(MatSnackBar);
  }
  #toastrService;
  showSuccess(message) {
    return this.#toastrService.success(message);
  }
  showError(message) {
    return this.#toastrService.error(message);
  }
  showWarning(message) {
    return this.#toastrService.warning(message);
  }
  showInfo(message) {
    return this.#toastrService.info(message);
  }
  static {
    this.\u0275fac = function NotificationService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _NotificationService)();
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ i02.\u0275\u0275defineInjectable({ token: _NotificationService, factory: _NotificationService.\u0275fac, providedIn: "root" });
  }
};

// src/app/shared/client-services/error.service.ts
var ErrorService = class _ErrorService {
  constructor(router, dialog, authService, notificationService) {
    this.router = router;
    this.dialog = dialog;
    this.authService = authService;
    this.notificationService = notificationService;
  }
  handle400Error(error) {
    this.notificationService.showError(this.getErrorMessage(error));
  }
  handle401Error(error) {
    this.notificationService.showError(this.getErrorMessage(error));
    this.dialog.closeAll();
    this.router.navigate(["/login"]);
  }
  handle403Error(err) {
    this.notificationService.showError(this.getErrorMessage(err));
  }
  handle404Error(error) {
    this.notificationService.showError(this.getErrorMessage(error));
  }
  handle422Error(error) {
    this.notificationService.showError(this.getErrorMessage(error));
  }
  handle500Error(error) {
    this.notificationService.showError(COMMON_MESSAGES.serverIsNotResponsible);
  }
  getErrorMessage(error) {
    return error.error && error.error.message ? error.error.message : error.statusText ? error.statusText : COMMON_MESSAGES.unknownError;
  }
  handleUnknownError(err) {
    this.notificationService.showError("An unknown error occurred");
  }
  static {
    this.\u0275fac = function ErrorService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ErrorService)(i03.\u0275\u0275inject(i1.Router), i03.\u0275\u0275inject(i2.MatDialog), i03.\u0275\u0275inject(UserService), i03.\u0275\u0275inject(NotificationService));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ i03.\u0275\u0275defineInjectable({ token: _ErrorService, factory: _ErrorService.\u0275fac, providedIn: "root" });
  }
};

// src/app/core/interceptors/auth-interceptor.ts
import * as i04 from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/@angular_core.js?v=3b3a651e";
var AuthInterceptor = class _AuthInterceptor {
  constructor() {
    this.toast = inject3(ToastrService2);
    this.authService = inject3(AuthService);
    this.isRefreshing = false;
    this.errorService = inject3(ErrorService);
  }
  intercept(request, handler) {
    return handler.handle(request).pipe(catchError((err) => {
      switch (err.error.code) {
        case 404:
          this.errorService.handle404Error(err);
          break;
        case 400:
          this.errorService.handle400Error(err);
          break;
        case 401:
          this.errorService.handle401Error(err);
          break;
        default:
          break;
      }
      return throwError(() => new Error(err.message));
    }));
  }
  static {
    this.\u0275fac = function AuthInterceptor_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _AuthInterceptor)();
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ i04.\u0275\u0275defineInjectable({ token: _AuthInterceptor, factory: _AuthInterceptor.\u0275fac });
  }
};

// src/app/app.config.ts
import { provideAnimations } from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/@angular_platform-browser_animations.js?v=3b3a651e";
import { provideNgProgressOptions } from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/ngx-progressbar.js?v=3b3a651e";
var appConfig = {
  providers: [
    provideZoneChangeDetection({ eventCoalescing: true }),
    provideRouter(routes),
    provideClientHydration(),
    provideAnimationsAsync(),
    provideAnimations(),
    provideToastr(),
    provideNgProgressOptions({ spinner: false }),
    importProvidersFrom(MatSnackBarModule),
    provideHttpClient(withFetch(), withInterceptorsFromDi()),
    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }
    // Uncomment the following if needed:
    // { provide: ErrorHandler, useClass: CustomErrorHandler },
    // {
    //   provide: HTTP_INTERCEPTORS,
    //   useClass: GlobalHttpErrorHandler,
    //   multi: true,
    // },
    // {
    //   provide: HTTP_INTERCEPTORS,
    //   useClass: ProgressBarInterceptor,
    //   multi: true,
    // },
  ]
};

// src/app/app.component.ts
import { Component as Component2 } from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/@angular_core.js?v=3b3a651e";
import { RouterOutlet } from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/@angular_router.js?v=3b3a651e";
import * as i05 from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/@angular_core.js?v=3b3a651e";
var AppComponent = class _AppComponent {
  constructor() {
  }
  ngOnInit() {
  }
  static {
    this.\u0275fac = function AppComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _AppComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i05.\u0275\u0275defineComponent({ type: _AppComponent, selectors: [["app-root"]], features: [i05.\u0275\u0275ExternalStylesFeature(["d71734535f36ae5365a28d860e3fa9fc6cce78be96f4aeb927e7719246bb912f.css"])], decls: 2, vars: 0, consts: [[1, "content"]], template: function AppComponent_Template(rf, ctx) {
      if (rf & 1) {
        i05.\u0275\u0275elementStart(0, "div", 0);
        i05.\u0275\u0275element(1, "router-outlet");
        i05.\u0275\u0275elementEnd();
      }
    }, dependencies: [RouterOutlet] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i05.\u0275setClassDebugInfo(AppComponent, { className: "AppComponent", filePath: "src/app/app.component.ts", lineNumber: 12 });
})();

// src/main.ts
import { register as registerSwiperElements } from "/@fs/D:/Personal/My-projects/clinicall_ali/client/.angular/cache/19.0.1/project/vite/deps/swiper_element_bundle.js?v=3b3a651e";
registerSwiperElements();
bootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));


//# sourceMappingURL=data:application/json;base64,